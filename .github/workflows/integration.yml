name: Integration workflow

on:
  push:
    branches:
      - integration
      - test_pipeline # TODO: remove 

# Here the environment variable is declared in workflow level
env:
  # TODO: Replace with our Orchestrator Values
  # PROJECT_NAME: uipath.github.action 
  # PROJECT_FOLDER: ${{ github.action_path }}
  ORCH_URL: "https://cloud.uipath.com/"
  ORCH_TENANT: ${{ secrets.UIPATHTENANTNAME }}
  ORCH_CLIENT_ID: ${{ secrets.UIPATHCLIENTID }}
  ORCH_USER_KEY: ${{ secrets.UIPATHUSERKEY }}
  ORCH_ACC_NAME: ${{ secrets.UIPATHACCOUNTNAME }}
  OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID}}
  OAUTH_CLIENT_SCOPES: ${{ secrets.OAUTH_CLIENT_SCOPES}}
  OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET}}

jobs:
  print-details:
    runs-on: ubuntu-latest
    steps:
      - name: echo-default-env-variables
        run: |
          echo "Home: ${HOME}"
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
          echo "GITHUB_ACTIONS: ${GITHUB_ACTIONS}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "GITHUB_REF: ${GITHUB_REF}"

  # clean-previous:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Runner workspace path
  #       run: |
  #         echo "Cleaning up previous run"
  #         rm -rf "${{ github.workspace }}"

  remove-old-artifacts:
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
    - name: Remove old artifacts
      uses: c-hive/gha-remove-artifacts@v1
      with:
        age: '1 month'        

  build: 
    runs-on: windows-latest
    needs: remove-old-artifacts
    steps:            
      # Checkout code from this repo
      - name: Checkout Code
        uses: actions/checkout@v2    

      # Facilitate the UiPath CLI in the github artifacts
      - name: Get UiPath CLI
        run: |
                New-Item -Path "C:\\" -ItemType "directory" -Name "uipathcli";
                Invoke-WebRequest "https://www.myget.org/F/uipath-dev/api/v2/package/UiPath.CLI/1.0.7985.19721" -OutFile "C:\\uipathcli\\cli.zip";
                Expand-Archive -LiteralPath "C:\\uipathcli\\cli.Zip" -DestinationPath "C:\\uipathcli";

      # Use uipcli to package and deploy (for each project.json found)                           
      - name: Pack and Deploy
        run: |
                foreach($package in Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter project.json -File)
                      {    
                          # Get some data from the package.json for package naming
                          $json = Get-Content "$package" | Out-String | ConvertFrom-Json
                          $foo = $json.projectVersion
                          $Name=$json.name
                          echo "::set-output name=PATH::$package"
                          echo $foo
                          $v= [version] "$foo"
                          $newversion= "{0}.{1}.{2}.{3}" -f $v.Major, $v.Minor, ($v.Build),"${{github.run_number}}"
                          $VERSION=[string]$newversion
                          echo $VERSION
                          echo $Name
                          echo ${{ github.workspace }}\$Name.$VERSION.nupkg
                          # Build and Deploy the Package
                          & "C:\\uipathcli\\lib\\net461\\uipcli.exe" package pack "$package" -o "${{ github.workspace }}" -v $VERSION -l en-US
                          & "C:\\uipathcli\\lib\\net461\\uipcli.exe" package deploy "${{ github.workspace }}\$($Name).$VERSION.nupkg" "https://cloud.uipath.com" "${{env.ORCH_TENANT}}" -A ${{env.ORCH_ACC_NAME}} -I ${{env.OAUTH_CLIENT_ID}} -S "${{env.OAUTH_CLIENT_SECRET}}" -o "Shared" --applicationScope "${{env.OAUTH_CLIENT_SCOPES}}"
                      }    
      # Persist build artifacts
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.0
        with:	 
            name: ProjectFiles
            path: ${{ github.workspace }}/**
            if-no-files-found: error
            retention-days: 2
        

  # build-uipath-nuget-package:
  #   # You should be able to run on windows 2019 or windows latest
  #   needs: clean-previous
  #   runs-on: windows-latest
  #   steps:
  #     - name: Check out repository code
  #       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #       uses: actions/checkout@v2
  #     - name: Build Nuget Package
  #       shell: pwsh
  #       run: ${{ github.workspace }}\scripts\UiPathPack.ps1 ${{ github.workspace }}\MetaMarian_Robot\project.json -destination_folder ${{ github.workspace }}\package
  #     - name: Upload UiPath Artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: Artifacts
  #         path: |
  #          package/*.*
  #          scripts/*.ps1

  # publish-uipath-nuget-package:
  #   needs: build-uipath-nuget-package
  #   runs-on: windows-latest
  #   steps:
  #     - name: Download UiPath Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: Artifacts
  #     - name: Publish Nuget Package to DEV
  #       shell: pwsh
  #       run: ${{ github.workspace }}\scripts\UiPathDeploy.ps1 ${{ github.workspace }}\package ${{env.ORCH_URL}} ${{env.ORCH_TENANT}} -UserKey ${{env.ORCH_USER_KEY}} -account_name ${{env.ORCH_ACC_NAME}}

  # test-uipath-published-package:
  #   needs: publish-uipath-nuget-package
  #   runs-on: windows-latest
  #   steps:
  #     - name: Download UiPath Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: Artifacts
  #     - name: Test the Package With Test Cases
  #       run: ${{ github.workspace }}\scripts\\UiPathRunTest.ps1  ${{env.ORCH_URL}} ${{env.ORCH_TENANT}} -UserKey ${{env.ORCH_USER_KEY}} -account_name ${{env.ORCH_ACC_NAME}} -testset "TestSet1" # change test set name 

